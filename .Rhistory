source('~/Dropbox/Projects/Minority Party/Scripts/setup.R') }
if(Sys.info()['user']=='aballard' | Sys.info()['user']=='Andy'){
source('~/Dropbox/Projects/Minority Party/Scripts/setup.R') }
source('~/Dropbox/Projects/Minority Party/Scripts/setupShort.R') }
if(Sys.info()['user']=='aballard' | Sys.info()['user']=='Andy'){
source('~/Dropbox/Projects/Minority Party/Scripts/setupShort.R') }
path.expand('~')
### Data path
pth <- '~/Dropbox/Projects/Minority Party/Data/'
if(Sys.info()['user']=='aballard' | Sys.info()['user']=='Andy'){
source('~/Dropbox/Projects/Minority Party/Scripts/setupShort.R') }
### ================================================================================
### Load and format votes data
votes <- fread(file = paste0(pth, 'votes_104to113.csv'), stringsAsFactors = FALSE, data.table = FALSE)
if(Sys.info()['user']=='aballard' | Sys.info()['user']=='Andy'){
source('~/Dropbox/Projects/Minority Party/Scripts/setup.R') }
####################################################################
### Source setup
####################################################################
if(Sys.info()['user']=='aballard' | Sys.info()['user']=='Andy'){
source('~/Dropbox/Projects/Minority Party/Scripts/racAnalysis_Descriptive.R') }
# Source setup file (loads packages, helper functions, and cleaned data)
if(Sys.info()['user']=='aballard' | Sys.info()['user']=='Andy'){
source('~/Dropbox/Projects/Minority Party/Scripts/setup.R') }
####################################################################
### Source setup
####################################################################
if(Sys.info()['user']=='aballard' | Sys.info()['user']=='Andy'){
source('~/Dropbox/Projects/Minority Party/Scripts/racAnalysis_Descriptive.R') }
if(Sys.info()['user']=='aballard' | Sys.info()['user']=='Andy'){
source('~/Dropbox/Projects/Minority Party/Scripts/setup.R') }
### ================================================================================
### Load and format votes data
votes <- fread(file = paste0(pth, 'votes_104to113.csv'), stringsAsFactors = FALSE, data.table = FALSE)
### ================================================================================
### Load and format votes data
votes <- fread(file = '~/Dropbox/Projects/Minority Party/Data/votes_104to113.csv', stringsAsFactors = FALSE, data.table = FALSE)
names(votes)
head(votes$V1)
votes <- dplyr::select(votes, -V1)
head(bills$billnum)
nas(bills$billnum)
head(bills$bill_number)
head(votes$bill_number)
head(with(bills, paste0(bill_number, congress)))
head(with(bills, paste0(congress, bill_number)))
head(with(votes, paste0(congress, bill_number)))
# Make matching bill ID variables
bills <- bills %>% mutate(billID = paste0(congress, bill_number))
votes <- votes %>% mutate(billID = paste0(congress, bill_number))
head(bills$billID)
head(votes$billID)
intersect(bills$billID, votes$billID) %>% d()
# Subset votes to those on bills
votes <- votes %>% filter(billID %in% unique(bills$billID))
unique(votes$billID) %>% d
unique(bills$billID) %>% d
# Load pipc data
pipc <- fread(paste0(pth, 'pipc.csv'), stringsAsFactors = FALSE, data.table = FALSE)
pth
# Load pipc data
pipc <- fread(file = paste0(pth, 'pipc.csv'), stringsAsFactors = FALSE, data.table = FALSE)
# Load pipc data
pipc <- fread(file = paste0(pth, 'Data/pipc.csv'), stringsAsFactors = FALSE, data.table = FALSE)
class(votes$prob)
if(Sys.info()['user']=='aballard' | Sys.info()['user']=='Andy'){
source('~/Dropbox/Projects/Minority Party/Scripts/setup.R') }
### ================================================================================
### Load and format votes data
# Load
votes <- fread(file = '~/Dropbox/Projects/Minority Party/Data/votes_104to113.csv', stringsAsFactors = FALSE, data.table = FALSE) %>%
dplyr::select(-V1)
# Fix probability variable (was coerced to character by fread)
votes$prob[votes$prob == 'N/A'] <- NA
votes$prob <- num(votes$prob)
# Create match var ( PROBLEM IS MATCHING VOTES TO BILLS, IS THIS POSSIBLE?? )
votes$rollID <- paste0(votes$congress, '_', votes$chamber, '_', votes$rollnumber)
# Match MCs' names and information to their votes
votes$chamber <- tolower(votes$chamber)
votes$rollID <- tolower(votes$rollID)
# Subset to match rollIDs from bills in bill_types
votes <- filter(votes, rollID %in% rolls$rollID)
# Remove Presidents (99909, 99910, 99911)
votes <- filter(votes, !icpsr %in% c(99909, 99910, 99911))
### Merge in major topic code from bills data
# Make matching bill ID variables
bills <- bills %>% mutate(billID = paste0(congress, bill_number))
votes <- votes %>% mutate(billID = paste0(congress, bill_number))
# Subset votes to those on bills
votes <- votes %>% filter(billID %in% unique(bills$billID))
# Load pipc data
pipc <- fread(file = paste0(pth, 'Data/pipc.csv'), stringsAsFactors = FALSE, data.table = FALSE)
# Load voteview rolls data
rolls <- readRDS(file = paste0(pth, 'cleaned_voteview_rolls.rds'))
### =============================================================================
### Source setup
if(Sys.info()['user']=='aballard' | Sys.info()['user']=='Andy'){
source('~/Dropbox/Projects/Minority Party/Scripts/setup.R') }
### ================================================================================
### Load and format votes data
# Load
votes <- fread(file = '~/Dropbox/Projects/Minority Party/Data/votes_104to113.csv', stringsAsFactors = FALSE, data.table = FALSE) %>%
dplyr::select(-V1)
# Fix probability variable (was coerced to character by fread)
votes$prob[votes$prob == 'N/A'] <- NA
votes$prob <- num(votes$prob)
# Create match var ( PROBLEM IS MATCHING VOTES TO BILLS, IS THIS POSSIBLE?? )
votes$rollID <- paste0(votes$congress, '_', votes$chamber, '_', votes$rollnumber)
# Match MCs' names and information to their votes
votes$chamber <- tolower(votes$chamber)
votes$rollID <- tolower(votes$rollID)
# Subset to match rollIDs from bills in bill_types
votes <- filter(votes, rollID %in% rolls$rollID)
# Remove Presidents (99909, 99910, 99911)
votes <- filter(votes, !icpsr %in% c(99909, 99910, 99911))
### Merge in major topic code from bills data
# Make matching bill ID variables
bills <- bills %>% mutate(billID = paste0(congress, bill_number))
votes <- votes %>% mutate(billID = paste0(congress, bill_number))
# Subset votes to those on bills
votes <- votes %>% filter(billID %in% unique(bills$billID))
# Load pipc data
pipc <- fread(file = paste0(pth, 'Data/pipc.csv'), stringsAsFactors = FALSE, data.table = FALSE)
# Load voteview rolls data
rolls <- readRDS(file = paste0(pth, 'cleaned_voteview_rolls.rds'))
# Match up roll number classes
pipc$clerk_rollnumber <- num(pipc$clerk_rollnumber)
# Sort by matching roll numbers (clerk_rollnumber)
pipc <- pipc[with(pipc, order(congress, clerk_rollnumber)),]
rolls <- rolls[with(rolls, order(congress, clerk_rollnumber)),]
# Make sure the rollnumbers match
identical(pipc$clerk_rollnumber, rolls$clerk_rollnumber)
identical(pipc$congress, rolls$congress)
identical(pipc$chamber, rolls$chamber)
identical(pipc$bill_number, rolls$bill_number)
### =============================================================================
### Source setup
if(Sys.info()['user']=='aballard' | Sys.info()['user']=='Andy'){
source('~/Dropbox/Projects/Minority Party/Scripts/setup.R') }
### ================================================================================
### Load and format votes data
# Load
votes <- fread(file = '~/Dropbox/Projects/Minority Party/Data/votes_104to113.csv', stringsAsFactors = FALSE, data.table = FALSE) %>%
dplyr::select(-V1)
# Fix probability variable (was coerced to character by fread)
votes$prob[votes$prob == 'N/A'] <- NA
votes$prob <- num(votes$prob)
# Create match var ( PROBLEM IS MATCHING VOTES TO BILLS, IS THIS POSSIBLE?? )
votes$rollID <- paste0(votes$congress, '_', votes$chamber, '_', votes$rollnumber)
# Match MCs' names and information to their votes
votes$chamber <- tolower(votes$chamber)
votes$rollID <- tolower(votes$rollID)
# Subset to match rollIDs from bills in bill_types
votes <- filter(votes, rollID %in% rolls$rollID)
# Remove Presidents (99909, 99910, 99911)
votes <- filter(votes, !icpsr %in% c(99909, 99910, 99911))
### Merge in major topic code from bills data
# Make matching bill ID variables
bills <- bills %>% mutate(billID = paste0(congress, bill_number))
votes <- votes %>% mutate(billID = paste0(congress, bill_number))
# Subset votes to those on bills
votes <- votes %>% filter(billID %in% unique(bills$billID))
# Load pipc data
pipc <- fread(file = paste0(pth, 'Data/pipc.csv'), stringsAsFactors = FALSE, data.table = FALSE)
# Load voteview rolls data
rolls <- readRDS(file = paste0(pth, 'cleaned_voteview_rolls.rds'))
# Match up roll number classes
pipc$clerk_rollnumber <- num(pipc$clerk_rollnumber)
# Sort by matching roll numbers (clerk_rollnumber)
pipc <- pipc[with(pipc, order(congress, clerk_rollnumber)),]
rolls <- rolls[with(rolls, order(congress, clerk_rollnumber)),]
# Make sure the rollnumbers match
identical(pipc$clerk_rollnumber, rolls$clerk_rollnumber)
identical(pipc$congress, rolls$congress)
identical(pipc$chamber, rolls$chamber)
identical(pipc$bill_number, rolls$bill_number)
## Merge rolls to pipc
rolls <- dplyr::select(rolls, -c(mid_1, mid_2, vote_question, bill_type))
pipc <- dplyr::select(pipc, -c(amendment, question, rollnumber))
pipcM <- dplyr::select(rolls, -c(congress, chamber, clerk_rollnumber, bill_number)) %>%
cbind(pipc, .)
head(pipcM)
pipcM <- pipcM %>% dplyr::select(-V1)
## Merge pipc to votes
votesM <- dplyr::select(pipcM, -c(congress, chamber, rollnumber)) %>%
left_join(votes, ., by = 'rollID') %>%
dplyr::select(., -year) # Year is very different for this df (year a vote happened) and bill-level data (election year). votesM already has a date column (%Y-%M-%D), so that's good enough.
votesM <- dplyr::select(pipcM, -c(congress, chamber, rollnumber))
head(pipcM$rollID)
head(votes$rollID)
votesM <- dplyr::select(pipcM, -c(congress, chamber, rollnumber)) %>%
left_join(votes, ., by = 'rollID')
head(votes$year)
## Merge pipc to votes
votesM <- dplyr::select(pipcM, -c(congress, chamber, rollnumber)) %>%
left_join(votes, ., by = 'rollID') %>%
dplyr::select(., -year) # Year is very different for this df (year a vote happened) and bill-level data (election year). votesM already has a date column (%Y-%M-%D), so that's good enough.
head(pipcM$year)
## Merge pipc to votes
votesM <- dplyr::select(pipcM, -c(congress, chamber, rollnumber, year)) %>%
left_join(votes, ., by = 'rollID') %>%
dplyr::select(., -year) # Year is very different for this df (year a vote happened) and bill-level data (election year). votesM already has a date column (%Y-%M-%D), so that's good enough.
head(votesM)
comNames(bills, votesM)
head(bills$minor)
table(bills$minori)
table(bills$minor)
table(bills$major)
## Merge bill topic to votesM
votesM <- dplyr::select(bills, c(billID, major, minor)) %>%
left_join(votesM, .)
head(votesM$major)
size(votesM)
x <- factor(1, 2, 3)
x
x <- factor(c(1, 2, 3))
x
class(x)
is.vector(x)
is.factor(x)
#' Length of object dimensions
#'
#' A common function to compute the number of elements (in vectors and lists) or the number of vectors in each dimension (dataframes, matrices, and arrays) of common types of \code{R} objects.
#' @param x An input object whose dimensions will be computed.
#' @return Returns a length-\code{n} integer vector where \code{n} is the number of dimensions in \code{x} (e.g. \code{n=1} for atomic vectors and lists, \code{n=2} for matrices and dataframes, and \code{n} may be more than 2 for some arrays). Each element in the output is the number of elements in that dimension of \code{x} (e.g. if \code{n=1}, the number of elements in the list or vector, if \code{n=2}, first the number of rows in the dataframe or matrix, then the number of columns).
d <- function(x){
if(!is.vector(x) !is.factor(x) & !is.matrix(x) & !is.data.frame(x) & !'Date' %in% class(x)){
stop('Requires data frame, matrix, list, array, or vector!')
}
if(is.vector(x) | is.factor(x) | 'Date' %in% class(x)){
length(x)
} else {
dim(x)
}
}
d <- function(x){
if(!is.vector(x) !is.factor(x) & !is.matrix(x) & !is.data.frame(x) & !'Date' %in% class(x)){
stop('Requires data frame, matrix, list, array, or vector!')
}
if(is.vector(x) | is.factor(x) | 'Date' %in% class(x)){
length(x)
} else {
dim(x)
}
}
#' Length of object dimensions
#'
#' A common function to compute the number of elements (in vectors and lists) or the number of vectors in each dimension (dataframes, matrices, and arrays) of common types of \code{R} objects.
#' @param x An input object whose dimensions will be computed.
#' @return Returns a length-\code{n} integer vector where \code{n} is the number of dimensions in \code{x} (e.g. \code{n=1} for atomic vectors and lists, \code{n=2} for matrices and dataframes, and \code{n} may be more than 2 for some arrays). Each element in the output is the number of elements in that dimension of \code{x} (e.g. if \code{n=1}, the number of elements in the list or vector, if \code{n=2}, first the number of rows in the dataframe or matrix, then the number of columns).
d <- function(x){
if(!is.vector(x) & !is.factor(x) & !is.matrix(x) & !is.data.frame(x) & !'Date' %in% class(x)){
stop('Requires data frame, matrix, list, array, or vector!')
}
if(is.vector(x) | is.factor(x) | 'Date' %in% class(x)){
length(x)
} else {
dim(x)
}
}
d(x)
x <- factor(c(1,2,3,2))
d(x)
x
rm(x)
build()
devtools::build()
library(abmisc)
.rs.restartR()
library(abmisc)
